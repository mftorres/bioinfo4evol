bibionames<-colnames(sortedbibio)
# get the length of the vector of names for the loop
len <- length(colnames(sortedbibio))
len
# filter the d indices dataframe to only include the names in bibionames
bibiods <- filter(dboth$`higher level`, rownames(dboth$`higher level`) %in% bibionames)
bibiods
# create the empty vector to store colours
srtdbibiocolshigh <-c()
# said loop
for (item in 1:len) {
col = map_viridis(alldindices, bibiods[[1]][[item]])
srtdbibiocolshigh <- c(srtdbibiocolshigh, col)
}
srtdbibiocolshigh
# we do the same for the other submatrix
# getting the names from the matrix
tipulonames<-colnames(sortedtipulo)
# get the length of the vector of names for the loop
len <- length(colnames(tipulonames))
len
# we do the same for the other submatrix
# getting the names from the matrix
tipulonames<-colnames(sortedtipulo)
# get the length of the vector of names for the loop
len <- length(colnames(tipulonames))
len
sortedtipulo<-sortweb(datatipulot, sort.order="inc")
# we do the same for the other submatrix
# getting the names from the matrix
tipulonames<-colnames(sortedtipulo)
# get the length of the vector of names for the loop
len <- length(colnames(tipulonames))
len
# we do the same for the other submatrix
# getting the names from the matrix
tipulonames<-colnames(sortedtipulo)
# get the length of the vector of names for the loop
len <- length(colnames(sortedtipulo))
len
# filter the d indices dataframe to only include the names in bibionames
tipulods <- filter(dboth$`higher level`, rownames(dboth$`higher level`) %in% tipulonames)
tipulods
# create the empty vector to store colours
srtdtipulocolshigh <-c()
# said loop
for (item in 1:len) {
col = map_viridis(alldindices, tipulods[[1]][[item]])
srtdtipulocolshigh <- c(srtdtipulocolshigh, col)
}
srtdtipulocolshigh
len
# filter the d indices dataframe to only include the names in bibionames
tipulods <- filter(dboth$`higher level`, rownames(dboth$`higher level`) %in% tipulonames)
tipulods
# create the empty vector to store colours
srtdtipulocolshigh <-c()
tipulods[[1]]
length( tipulods[[1]])
# said loop
for (item in 1:len) {
col = map_viridis(alldindices, tipulods[[1]][[item]])
srtdtipulocolshigh <- c(srtdtipulocolshigh, col)
}
srtdtipulocolshigh
print(item, tipulods[[1]][[item]])
length(srtdbibiocolshigh)
length(row.names(bibiods))
# create the empty vector to store colours
srtdbibiocolshigh <-c()
# getting the names from the matrix
bibionames<-colnames(sortedbibio)
# get the length of the vector of names for the loop
len <- length(colnames(sortedbibio))
len
# filter the d indices dataframe to only include the names in bibionames
bibiods <- filter(dboth$`higher level`, rownames(dboth$`higher level`) %in% bibionames)
bibiods
length(row.names(bibiods))
# create the empty vector to store colours
srtdbibiocolshigh <-c()
# said loop
for (item in 1:len) {
print(item, bibiods[[1]][[item]])
col = map_viridis(alldindices, bibiods[[1]][[item]])
srtdbibiocolshigh <- c(srtdbibiocolshigh, col)
}
# said loop
for (item in 1:len) {
print(item)
print(bibiods[[1]][[item]])
col = map_viridis(alldindices, bibiods[[1]][[item]])
srtdbibiocolshigh <- c(srtdbibiocolshigh, col)
}
length(srtdbibiocolshigh)
# said loop
for (item in 1:len) {
col = map_viridis(alldindices, bibiods[[1]][[item]])
srtdbibiocolshigh <- c(srtdbibiocolshigh, col)
print(item)
print(bibiods[[1]][[item]])
print(col)
}
bibiods
# functions need to be created first before you can apply them
# create a function to create colour list to colour flies by d index
map_viridis <- function(vec, num) {
vector_expanded <-round(vec, 1) * 100 # expand to allow for decimal precision
vector_exp_range <- max(vector_expanded) - min(vector_expanded)
colour_vector <- viridis(vector_exp_range + 1) # get vector of colour values for all possible decimals between min and max value
value_to_colour <- colour_vector[num * 100 - min(vector_expanded) + 1] # retrieve colour value for number
return(value_to_colour)
}
# said loop
for (item in 1:len) {
col = map_viridis(alldindices, bibiods[[1]][[item]])
srtdbibiocolshigh <- c(srtdbibiocolshigh, col)
print(item)
print(bibiods[[1]][[item]])
print(col)
}
# create the empty vector to store colours
srtdbibiocolshigh <-c()
# said loop
for (item in 1:len) {
col = map_viridis(alldindices, bibiods[[1]][[item]])
srtdbibiocolshigh <- c(srtdbibiocolshigh, col)
print(item)
print(bibiods[[1]][[item]])
print(col)
}
len
# filter the d indices dataframe to only include the names in bibionames
bibiods <- filter(dboth$`higher level`, rownames(dboth$`higher level`) %in% bibionames)
bibiods
length(row.names(bibiods))
# create the empty vector to store colours
srtdbibiocolshigh <-c()
# said loop
for (item in 1:len) {
col = map_viridis(alldindices, bibiods[[1]][[item]])
srtdbibiocolshigh <- c(srtdbibiocolshigh, col)
print(item)
print(bibiods[[1]][[item]])
print(col)
}
length(srtdbibiocolshigh)
return(value_to_colour)
map_viridis <- function(vec, num) {
vector_exp_range <- max(vec) - min(vec)
colour_vector <- viridis(vector_exp_range + 1) # get vector of colour values for all possible decimals between min and max value
value_to_colour <- colour_vector[num  - min(vec) + 1] # retrieve colour value for number
return(value_to_colour)
}
# getting the names from the matrix
bibionames<-colnames(sortedbibio)
# get the length of the vector of names for the loop
len <- length(colnames(sortedbibio))
len
# filter the d indices dataframe to only include the names in bibionames
bibiods <- filter(dboth$`higher level`, rownames(dboth$`higher level`) %in% bibionames)
bibiods
length(row.names(bibiods))
# create the empty vector to store colours
srtdbibiocolshigh <-c()
# said loop
for (item in 1:len) {
col = map_viridis(alldindices, bibiods[[1]][[item]])
srtdbibiocolshigh <- c(srtdbibiocolshigh, col)
print(item)
print(bibiods[[1]][[item]])
print(col)
}
length(srtdbibiocolshigh)
# functions need to be created first before you can apply them
# create a function to create colour list to colour flies by d index
map_viridis <- function(vec, num) {
vector_expanded <-round(vec, 1) * 10 # expand to allow for decimal precision
vector_exp_range <- max(vector_expanded) - min(vector_expanded)
colour_vector <- viridis(vector_exp_range + 1) # get vector of colour values for all possible decimals between min and max value
value_to_colour <- colour_vector[num * 10 - min(vector_expanded) + 1] # retrieve colour value for number
return(value_to_colour)
}
# first, calculate specificity and generalism
# at the species level
# specificity index at the node level d for BlÃ¼thgen's d'
dboth <- specieslevel(sorted, index="d", level="both")
dboth$`higher level` # flies
dboth$`lower level` # plants
dboth$`lower level`[[1]]
len <- length(dboth$`lower level`[[1]])
len
lowcol <-c()
for (i in 1:len) {
col = map_viridis(dboth$`lower level`[[1]], dboth$`lower level`[[1]][[i]])
lowcol <- c(lowcol, col)
}
lowcol
len <- length(dboth$`higher level`[[1]])
len
highcol <-c()
for (i in 1:len) {
col = map_viridis(dboth$`higher level`[[1]], dboth$`higher level`[[1]][[i]])
highcol <- c(highcol, col)
}
highcol
dboth
dboth$`higher level`
as.data.frame(dboth$`higher level`)
dhighercols <- as.data.frame(dboth$`higher level`)
dhighercols
dhighercols$colors <-highcol
dhighercols
# getting the names from the matrix
bibionames<-colnames(sortedbibio)
# get the length of the vector of names for the loop
len <- length(colnames(sortedbibio))
dhighercols
# filter the d indices dataframe to only include the names in bibionames
bibiods <- filter(dhighercols, rownames(dhighercols) %in% bibionames)
bibiods
# we do the same for the other submatrix
# getting the names from the matrix
tipulonames<-colnames(sortedtipulo)
# filter the d indices dataframe to only include the names in bibionames
tipulods <- filter(dhighercols, rownames(dhighercols) %in% tipulonames)
tipulods
srtdtipulocolslow
plotweb(sortedbibio, method="normal", text.rot = 90, x.lim = c(0,1.3),
col.high = bibiods$colors,
col.low = srtdbibiocolslow,
bor.col.high = FALSE,
bor.col.low = FALSE)
plotweb(sortedtipulo, method="normal", text.rot = 90, x.lim = c(0,1.3),
col.high = tipulods$colors,
col.low = srtdtipulocolslow,
bor.col.high = FALSE,
bor.col.low = FALSE)
plotweb(sortedtipulo, method="normal", text.rot = 90, x.lim = c(0,1.3),
col.high = tipulods$colors,
col.low = srtdtipulocolslow,
bor.col.high = FALSE,
bor.col.low = FALSE)
plotweb(sortedbibio, method="normal", text.rot = 90, x.lim = c(0,1.3),
col.high = bibiods$colors,
col.low = srtdbibiocolslow,
bor.col.high = FALSE,
bor.col.low = FALSE)
View(pools12glb_m)
View(pools13.glb.fsts)
pools12.glb.fsts[["snp.FST"]]
head(pools12.glb.fsts[["snp.FST"]])
shape(pools12.glb.fsts[["snp.FST"]])
dim
dime(pools12.glb.fsts[["snp.FST"]])
dim(pools12.glb.fsts[["snp.FST"]])
str(pools12.glb.fsts[["snp.FST"]])
str(pools12.glb.fsts[["snp.Q1"]])
str(pools12.glb.fsts[["snp.Q2"]])
str(pools12@refallele.readcount)
View(pools12)
#pooldata <- vcf2pooldata(vcf.file = './testvcf_1best_filltag_ADannot.vcf',
pooldata <- vcf2pooldata(vcf.file = './allpools_gmref_C1F001_wdup_DP10_fixup_woNAlternate_ADannot.vcf',
poolsizes = psizes, poolnames = pnames,
min.rc = 4, min.cov.per.pool = 10,
max.cov.per.pool = 10000,
min.maf = 0.05, remove.indels = FALSE,
nlines.per.readblock = 1000,
verbose=TRUE)#1e+06)
setwd("C:/Users/mftor/Documents/geonoma/gmref")
#pooldata <- vcf2pooldata(vcf.file = './testvcf_1best_filltag_ADannot.vcf',
pooldata <- vcf2pooldata(vcf.file = './allpools_gmref_C1F001_wdup_DP10_fixup_woNAlternate_ADannot.vcf',
poolsizes = psizes, poolnames = pnames,
min.rc = 4, min.cov.per.pool = 10,
max.cov.per.pool = 10000,
min.maf = 0.05, remove.indels = FALSE,
nlines.per.readblock = 1000,
verbose=TRUE)#1e+06)
# From this file we can compute global and per SNP FSTs
pool.glb.fsts <- computeFST(pooldata, method = 'Anova', nsnp.per.bjack.block = 5,
sliding.window.size=10)
View(pool.glb.fsts)
View(pooldata)
write.table(poolsall_info, file="poolsall_info.txt", row.names=FALSE, col.names=TRUE)
poolsall_info <- cbind(pooldata@snp.info[["Chromosome"]],
pooldata@snp.info[["Position"]],
pooldata@snp.info[["RefAllele"]],
pooldata@snp.info[["AltAllele"]],
pooldata.glb.fsts[["snp.FST"]],
pooldata.glb.fsts[["snp.Q1"]],
pooldata.glb.fsts[["snp.Q2"]],
pooldata@refallele.readcount,
pooldata4@readcoverage)
poolsall_info <- cbind(pooldata@snp.info[["Chromosome"]],
pooldata@snp.info[["Position"]],
pooldata@snp.info[["RefAllele"]],
pooldata@snp.info[["AltAllele"]],
pooldata@refallele.readcount,
pooldata4@readcoverage)
poolsall_info <- cbind(pooldata@snp.info[["Chromosome"]],
pooldata@snp.info[["Position"]],
pooldata@snp.info[["RefAllele"]],
pooldata@snp.info[["AltAllele"]],
pooldata@refallele.readcount,
pooldata@readcoverage)
write.table(poolsall_info, file="poolsall_info.txt", row.names=FALSE, col.names=TRUE)
library(bipartite)
library(vegan)
library(dplyr)
library(scales)
#install.packages("viridis")
library(viridis)
# functions need to be created first before you can apply them
# create a function to create colour list to colour flies by d index
map_viridis <- function(vec, num) {
vector_expanded <-round(vec, 1) * 10 # expand to allow for decimal precision
vector_exp_range <- max(vector_expanded) - min(vector_expanded)
colour_vector <- viridis(vector_exp_range + 1) # get vector of colour values for all possible decimals between min and max value
value_to_colour <- colour_vector[num * 10 - min(vector_expanded) + 1] # retrieve colour value for number
return(value_to_colour)
}
setwd("C:/Users/mftor/Documents/beetles")
# this is the full data
data <- read.table('./Ina_flies_males.txt', header= T, sep= "\t", row.names= 1)
databibio <-read.table('./Ina_flies_males_bibio.txt', header = T, sep = '\t', row.names = 1)
datatipulo <- read.table('./Ina_flies_males_tipulo.txt', header = T, sep = '\t', row.names = 1)
data <- data[,1:5] # [rows,colums] range: columns 1-6 == [,1:6]. rows from 1-6 == [1:6,]
data
databibio
datatipulo<- datatipulo[,1:5]
datatipulo
# we need tree species as rows and fly species as columns
datat <- t(data)
datat
databibiot <-t(databibio)
datatipulot <-t(datatipulo)
databibiot
datatipulot
rownames(datat)
colnames(datat)
str(datat)
# sortweb is a function of the bipartite package and sorts the interactions
sorted <- sortweb(datat, sort.order="inc")
sortedbibio<-sortweb(databibiot, sort.order="inc")
sortedtipulo<-sortweb(datatipulot, sort.order="inc")
plotweb(sortedbibio, method="normal", text.rot = 90, x.lim = c(0,1.3))
plotweb(sortedtipulo, method="normal", text.rot = 90, x.lim = c(0,1.3))
# calculate d indices for both levels (flies and plants)
# using all data in the full matrix
# specificity index at the node level d for BlÃ¼thgen's d'
dboth <- specieslevel(sorted, index="d", level="both")
dboth$`higher level` # flies
dboth$`lower level` # plants
dboth$`lower level`[[1]]
# we are adding together the low and high d indices to make sure the colours are comparable
alldindices <- sort(c(dboth$`lower level`[[1]],dboth$`higher level`[[1]]))
# double check what we have
length(allindices)
# double check what we have
length(alldindices)
min(alldindices)
max(alldindices)
# creating the colour vetor for the low level one value at a time
# first, I get the lienght of the list of objects for which I want colours
row.names(sortedbibio)
len <- length(row.names(sortedbibio))
len
srtdbibiocolslow <-c()
# instead of using the d index for plants and flies (alldindices)
# I will use a vector that goes form 0 to one
# to represent the values that d can take
for (item in 1:len) {
col = map_viridis(c(0,1), dboth$`lower level`[[1]][[item]])
srtdbibiocolslow <- c(srtdbibiocolslow, col)
}
srtdbibiocolslow
srtdtipulocolslow <-c()
for (item in 1:len) {
col = map_viridis(alldindices, dboth$`lower level`[[1]][[item]])
srtdtipulocolslow <- c(srtdtipulocolslow, col)
}
srtdtipulocolslow
# getting the names from the matrix
bibionames<-colnames(sortedbibio)
# filter the d indices dataframe to only include the names in bibionames
bibiods <- filter(dhighercols, rownames(dhighercols) %in% bibionames)
bibiods
# getting the names from the matrix
bibionames<-colnames(sortedbibio)
# filter the d indices dataframe to only include the names in bibionames
bibiods <- filter(dhighercols, rownames(dhighercols) %in% bibionames)
# functions need to be created first before you can apply them
# create a function to create colour list to colour flies by d index
map_viridis <- function(vec, num) {
vector_expanded <-round(vec, 1) * 10 # expand to allow for decimal precision
vector_exp_range <- max(vector_expanded) - min(vector_expanded)
colour_vector <- viridis(vector_exp_range + 1) # get vector of colour values for all possible decimals between min and max value
value_to_colour <- colour_vector[num * 10 - min(vector_expanded) + 1] # retrieve colour value for number
return(value_to_colour)
}
setwd("C:/Users/mftor/Documents/beetles")
# this is the full data
data <- read.table('./Ina_flies_males.txt', header= T, sep= "\t", row.names= 1)
databibio <-read.table('./Ina_flies_males_bibio.txt', header = T, sep = '\t', row.names = 1)
datatipulo <- read.table('./Ina_flies_males_tipulo.txt', header = T, sep = '\t', row.names = 1)
data <- data[,1:5] # [rows,colums] range: columns 1-6 == [,1:6]. rows from 1-6 == [1:6,]
data
databibio
datatipulo<- datatipulo[,1:5]
datatipulo
# we need tree species as rows and fly species as columns
datat <- t(data)
datat
databibiot <-t(databibio)
datatipulot <-t(datatipulo)
databibiot
datatipulot
rownames(datat)
colnames(datat)
str(datat)
# sortweb is a function of the bipartite package and sorts the interactions
sorted <- sortweb(datat, sort.order="inc") # whole data
sortedbibio<-sortweb(databibiot, sort.order="inc")
sortedtipulo<-sortweb(datatipulot, sort.order="inc")
plotweb(sortedbibio, method="normal", text.rot = 90, x.lim = c(0,1.3))
plotweb(sortedtipulo, method="normal", text.rot = 90, x.lim = c(0,1.3))
# calculate d indices for both levels (flies and plants)
# using all data in the full matrix
# specificity index at the node level d for BlÃ¼thgen's d'
dboth <- specieslevel(sorted, index="d", level="both")
dboth$`higher level` # flies
dboth$`lower level` # plants
dboth$`lower level`[[1]]
dboth$`lower level`[[1]]
# we are adding together the low and high d indices to make sure the colours are comparable
alldindices <- sort(c(dboth$`lower level`[[1]],dboth$`higher level`[[1]]))
# double check what we have
length(alldindices) # 113 flies + 5 plants
min(alldindices)
max(alldindices)
# get colours for high level
len <- length(dboth$`higher level`[[1]])
len
highcol <-c()
for (i in 1:len) {
col = map_viridis(dboth$`higher level`[[1]], dboth$`higher level`[[1]][[i]])
highcol <- c(highcol, col)
}
highcol
# add that vector as a new column in the d indices matrix for the high level (flies)
dhighercols <- as.data.frame(dboth$`higher level`)
dhighercols$colors <-highcol
dhighercols
# now, do the same for the low level
len <- length(dboth$`lower level`[[1]])
len
lowcol <-c()
for (i in 1:len) {
col = map_viridis(dboth$`lower level`[[1]], dboth$`lower level`[[1]][[i]])
lowcol <- c(lowcol, col)
}
lowcol
dlowercols <- as.data.frame(dboth$`lower level`)
dlowercols$colors <-lowcol
dlowercols
# getting the names from the matrix
bibionames<-colnames(sortedbibio)
dhighercols
# getting the names from the matrix
bibionames<-colnames(sortedbibio)
# filter the d indices dataframe to only include the names in bibionames
bibiods <- filter(dhighercols, rownames(dhighercols) %in% bibionames)
bibiods
rownames(dhighercols)
length(bibionames)
# we do the same for the other submatrix
# getting the names from the matrix
tipulonames<-colnames(sortedtipulo)
# filter the d indices dataframe to only include the names in bibionames
tipulods <- filter(dhighercols, rownames(dhighercols) %in% tipulonames)
tipulods
# now plot
plotweb(sortedbibio, method="normal", text.rot = 90, x.lim = c(0,1.3),
col.high = bibiods$colors,
col.low = dlowercols$colors,
bor.col.high = FALSE,
bor.col.low = FALSE)
plotweb(sortedtipulo, method="normal", text.rot = 90, x.lim = c(0,1.3),
col.high = tipulods$colors,
col.low = dlowercols$colors,
bor.col.high = FALSE,
bor.col.low = FALSE)
# the colour bar
colorbar.plot(0, 1, c(0,1), strip.width = 0.1, strip.length = 4 * strip.width,
col = 'viridis',
horizontal = TRUE, ...)
library(fields)
# the colour bar
colorbar.plot(0, 1, c(0,1), strip.width = 0.1, strip.length = 4 * strip.width,
col = 'viridis',
horizontal = TRUE, ...)
plotweb(sortedtipulo, method="normal", text.rot = 90, x.lim = c(0,1.3),
col.high = tipulods$colors,
col.low = dlowercols$colors,
bor.col.high = FALSE,
bor.col.low = FALSE)
# the colour bar
colorbar.plot(0, 1, c(0,1), strip.width = 0.1, strip.length = 4 * strip.width,
col = 'viridis',
horizontal = TRUE, ...)
install.packages(c("downlit", "xml2"))
setwd("C:/Users/mftor/Documents/bioinfo4evol")
